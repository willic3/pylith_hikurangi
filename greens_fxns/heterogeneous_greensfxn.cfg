[pylithapp.metadata]

# Compute static Green's functions for slip impulses from -100 km <= y <= 0 km
# using elastic properties from the New Zealand velocity model.
base = [pylithapp.cfg]
description = "Static Green's functions for slow slip"
authors = [McKenzie Carlson, Charles Williams]
keywords = ["Green's functions"]
arguments = [heterogeneous_greensfxn.cfg]
version = 1.0.0
pylith_version = [>=4.0, <5.0]

features = [
    "Green's functions",
    Fault slip impulses
    ]

# ----------------------------------------------------------------------
# Monitoring and parameter viewing.
# ----------------------------------------------------------------------
[pylithapp]
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/heterogeneous_greensfxn-parameters.json
problem.progress_monitor.filename = output/heterogeneous_greensfxn-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = heterogeneous_greensfxn

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
# Turn on journal information for Green's function problem.
[pylithapp.journal.info]
greensfns = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
#refiner = pylith.topology.RefineUniform

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------

# Material properties from spatial db -----------------------------
[pylithapp.problem.materials.from_sdb]
description = Material properties
label_value = 1

db_auxiliary_field = spatialdata.spatialdb.SimpleGridDB
db_auxiliary_field.description = Material properties from velocity model
db_auxiliary_field.filename = vlnzw2.3_profile2d.spatialdb
db_auxiliary_field.query_type = linear

observers.observer.trigger.num_skip = 0

auxiliary_subfields.density.basis_order = 1
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 1
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 1

# # Material for U1518 --------------------
# [pylithapp.problem.materials.u1518_mat]
# description = Site U1518
# label_value = 2

# # The properties are uniform within the material, so we use a UniformDB.
# db_auxiliary_field = spatialdata.spatialdb.UniformDB
# db_auxiliary_field.description = Site U1518 elastic properties
# db_auxiliary_field.values = [density, vs, vp]
# db_auxiliary_field.data = [2500.0*kg/m**3, 3.00*km/s, 5.29*km/s]

# observers.observer.trigger.num_skip = 1

# # The properties are uniform, so we use a basis order of 0, corresponding
# # to uniform properties within a cell.
# auxiliary_subfields.density.basis_order = 0
# bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
# bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# # We discretize the displacement field with a basis order of 1
# # so the stress and strain computed from the displacement field
# # will have an accuracy of one order lower. Consequently, we use
# # a basis order of 0.
# derived_subfields.cauchy_strain.basis_order = 0
# derived_subfields.cauchy_stress.basis_order = 0

# # Material for U1519 --------------------
# [pylithapp.problem.materials.u1519_mat]
# description = Site U1519
# label_value = 2

# # The properties are uniform within the material, so we use a UniformDB.
# db_auxiliary_field = spatialdata.spatialdb.UniformDB
# db_auxiliary_field.description = Site U1519 elastic properties
# db_auxiliary_field.values = [density, vs, vp]
# db_auxiliary_field.data = [2500.0*kg/m**3, 3.00*km/s, 5.29*km/s]

# observers.observer.trigger.num_skip = 1

# # The properties are uniform, so we use a basis order of 0, corresponding
# # to uniform properties within a cell.
# auxiliary_subfields.density.basis_order = 0
# bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
# bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# # We discretize the displacement field with a basis order of 1
# # so the stress and strain computed from the displacement field
# # will have an accuracy of one order lower. Consequently, we use
# # a basis order of 0.
# derived_subfields.cauchy_strain.basis_order = 0
# derived_subfields.cauchy_stress.basis_order = 0

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp]
# Change the problem type to GreensFns.
problem = pylith.problems.GreensFns

[pylithapp.greensfns]
# Specify the fault on which to impose slip impulses.
# The `label` and `label_value` correspond to the name and tag of the
# physical group in the Gmsh Python script.
label = fault
label_value = 15

[pylithapp.problem]
# We add output at our fake GNSS stations that we will use to invert for the slip.
solution_observers = [domain, groundsurf, gnss_stations]
solution_observers.gnss_stations = pylith.meshio.OutputSolnPoints

[pylithapp.problem.solution_observers.domain]
# reduce number of outputs in the domain
trigger.num_skip = 1000000

[pylithapp.problem.solution_observers.gnss_stations]
# The label is combined with the simulation name to provide a default name for output files.
label = gnss_stations
reader.filename = observations_2dlocs.txt
reader.coordsys.space_dim = 2

# ----------------------------------------------------------------------
# fault
# ----------------------------------------------------------------------
[pylithapp.problem.interfaces]
# To create slip impulses for Green's functions we use a special fault type.
fault = pylith.faults.FaultCohesiveImpulses

[pylithapp.problem.interfaces.fault]
# Limit Green's functions to left-lateral slip (dof=1)
impulse_dof = [1]
label = fault
label_value = 15
edge = fault_end
edge_value = 16

# Output `slip` on the fault.
observers.observer.data_fields = [slip]

# We use a spatial database to specify the region of the fault where we want
# slip impulses for Green's functions.
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Fault rupture auxiliary field spatial database
db_auxiliary_field.iohandler.filename = slip_impulses.spatialdb

# Currently, only basis order = 1 results in appropriate output for inversion.
auxiliary_subfields.slip.basis_order = 1

# End of File